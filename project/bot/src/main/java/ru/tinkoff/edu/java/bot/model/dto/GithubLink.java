/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.bot.model.dto;


import jakarta.validation.constraints.Size;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.18.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GithubLink implements Serializable {

    private static final long serialVersionUID = 1L;

    private String link;
    private String repositoryId;
    private String name;
    private String fullName;
    private LocalDateTime lastActivityTime;
    private Integer forksCount;
    private Integer openIssuesCount;
    private LocalDateTime lastCheckTime;

    public GithubLink() {
    }

    public GithubLink(GithubLink value) {
        this.link = value.link;
        this.repositoryId = value.repositoryId;
        this.name = value.name;
        this.fullName = value.fullName;
        this.lastActivityTime = value.lastActivityTime;
        this.forksCount = value.forksCount;
        this.openIssuesCount = value.openIssuesCount;
        this.lastCheckTime = value.lastCheckTime;
    }

    @ConstructorProperties({"link", "repositoryId", "name", "fullName", "lastActivityTime", "forksCount", "openIssuesCount", "lastCheckTime"})
    public GithubLink(
            @NotNull String link,
            @Nullable String repositoryId,
            @Nullable String name,
            @Nullable String fullName,
            @NotNull LocalDateTime lastActivityTime,
            @Nullable Integer forksCount,
            @Nullable Integer openIssuesCount,
            @Nullable LocalDateTime lastCheckTime
    ) {
        this.link = link;
        this.repositoryId = repositoryId;
        this.name = name;
        this.fullName = fullName;
        this.lastActivityTime = lastActivityTime;
        this.forksCount = forksCount;
        this.openIssuesCount = openIssuesCount;
        this.lastCheckTime = lastCheckTime;
    }

    /**
     * Getter for <code>GITHUB_LINK.LINK</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 200)
    @NotNull
    public String getLink() {
        return this.link;
    }

    /**
     * Setter for <code>GITHUB_LINK.LINK</code>.
     */
    public void setLink(@NotNull String link) {
        this.link = link;
    }

    /**
     * Getter for <code>GITHUB_LINK.REPOSITORY_ID</code>.
     */
    @Size(max = 50)
    @Nullable
    public String getRepositoryId() {
        return this.repositoryId;
    }

    /**
     * Setter for <code>GITHUB_LINK.REPOSITORY_ID</code>.
     */
    public void setRepositoryId(@Nullable String repositoryId) {
        this.repositoryId = repositoryId;
    }

    /**
     * Getter for <code>GITHUB_LINK.NAME</code>.
     */
    @Size(max = 200)
    @Nullable
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>GITHUB_LINK.NAME</code>.
     */
    public void setName(@Nullable String name) {
        this.name = name;
    }

    /**
     * Getter for <code>GITHUB_LINK.FULL_NAME</code>.
     */
    @Size(max = 200)
    @Nullable
    public String getFullName() {
        return this.fullName;
    }

    /**
     * Setter for <code>GITHUB_LINK.FULL_NAME</code>.
     */
    public void setFullName(@Nullable String fullName) {
        this.fullName = fullName;
    }

    /**
     * Getter for <code>GITHUB_LINK.LAST_ACTIVITY_TIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getLastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Setter for <code>GITHUB_LINK.LAST_ACTIVITY_TIME</code>.
     */
    public void setLastActivityTime(@NotNull LocalDateTime lastActivityTime) {
        this.lastActivityTime = lastActivityTime;
    }

    /**
     * Getter for <code>GITHUB_LINK.FORKS_COUNT</code>.
     */
    @Nullable
    public Integer getForksCount() {
        return this.forksCount;
    }

    /**
     * Setter for <code>GITHUB_LINK.FORKS_COUNT</code>.
     */
    public void setForksCount(@Nullable Integer forksCount) {
        this.forksCount = forksCount;
    }

    /**
     * Getter for <code>GITHUB_LINK.OPEN_ISSUES_COUNT</code>.
     */
    @Nullable
    public Integer getOpenIssuesCount() {
        return this.openIssuesCount;
    }

    /**
     * Setter for <code>GITHUB_LINK.OPEN_ISSUES_COUNT</code>.
     */
    public void setOpenIssuesCount(@Nullable Integer openIssuesCount) {
        this.openIssuesCount = openIssuesCount;
    }

    /**
     * Getter for <code>GITHUB_LINK.LAST_CHECK_TIME</code>.
     */
    @Nullable
    public LocalDateTime getLastCheckTime() {
        return this.lastCheckTime;
    }

    /**
     * Setter for <code>GITHUB_LINK.LAST_CHECK_TIME</code>.
     */
    public void setLastCheckTime(@Nullable LocalDateTime lastCheckTime) {
        this.lastCheckTime = lastCheckTime;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final GithubLink other = (GithubLink) obj;
        if (this.link == null) {
            if (other.link != null)
                return false;
        } else if (!this.link.equals(other.link))
            return false;
        if (this.repositoryId == null) {
            if (other.repositoryId != null)
                return false;
        } else if (!this.repositoryId.equals(other.repositoryId))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        } else if (!this.name.equals(other.name))
            return false;
        if (this.fullName == null) {
            if (other.fullName != null)
                return false;
        } else if (!this.fullName.equals(other.fullName))
            return false;
        if (this.lastActivityTime == null) {
            if (other.lastActivityTime != null)
                return false;
        } else if (!this.lastActivityTime.equals(other.lastActivityTime))
            return false;
        if (this.forksCount == null) {
            if (other.forksCount != null)
                return false;
        } else if (!this.forksCount.equals(other.forksCount))
            return false;
        if (this.openIssuesCount == null) {
            if (other.openIssuesCount != null)
                return false;
        } else if (!this.openIssuesCount.equals(other.openIssuesCount))
            return false;
        if (this.lastCheckTime == null) {
            if (other.lastCheckTime != null)
                return false;
        } else if (!this.lastCheckTime.equals(other.lastCheckTime))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.link == null) ? 0 : this.link.hashCode());
        result = prime * result + ((this.repositoryId == null) ? 0 : this.repositoryId.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.fullName == null) ? 0 : this.fullName.hashCode());
        result = prime * result + ((this.lastActivityTime == null) ? 0 : this.lastActivityTime.hashCode());
        result = prime * result + ((this.forksCount == null) ? 0 : this.forksCount.hashCode());
        result = prime * result + ((this.openIssuesCount == null) ? 0 : this.openIssuesCount.hashCode());
        result = prime * result + ((this.lastCheckTime == null) ? 0 : this.lastCheckTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("GithubLink (");

        sb.append(link);
        sb.append(", ").append(repositoryId);
        sb.append(", ").append(name);
        sb.append(", ").append(fullName);
        sb.append(", ").append(lastActivityTime);
        sb.append(", ").append(forksCount);
        sb.append(", ").append(openIssuesCount);
        sb.append(", ").append(lastCheckTime);

        sb.append(")");
        return sb.toString();
    }
}
