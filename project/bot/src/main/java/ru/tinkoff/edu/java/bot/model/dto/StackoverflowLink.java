/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.bot.model.dto;


import jakarta.validation.constraints.Size;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.18.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class StackoverflowLink implements Serializable {

    private static final long serialVersionUID = 1L;

    private String link;
    private Integer quotaMax;
    private Integer quotaRemaining;
    private LocalDateTime lastActivityTime;
    private Boolean isAnswered;
    private Integer answerCount;
    private LocalDateTime lastCheckTime;

    public StackoverflowLink() {
    }

    public StackoverflowLink(StackoverflowLink value) {
        this.link = value.link;
        this.quotaMax = value.quotaMax;
        this.quotaRemaining = value.quotaRemaining;
        this.lastActivityTime = value.lastActivityTime;
        this.isAnswered = value.isAnswered;
        this.answerCount = value.answerCount;
        this.lastCheckTime = value.lastCheckTime;
    }

    @ConstructorProperties({"link", "quotaMax", "quotaRemaining", "lastActivityTime", "isAnswered", "answerCount", "lastCheckTime"})
    public StackoverflowLink(
            @NotNull String link,
            @Nullable Integer quotaMax,
            @Nullable Integer quotaRemaining,
            @NotNull LocalDateTime lastActivityTime,
            @Nullable Boolean isAnswered,
            @Nullable Integer answerCount,
            @Nullable LocalDateTime lastCheckTime
    ) {
        this.link = link;
        this.quotaMax = quotaMax;
        this.quotaRemaining = quotaRemaining;
        this.lastActivityTime = lastActivityTime;
        this.isAnswered = isAnswered;
        this.answerCount = answerCount;
        this.lastCheckTime = lastCheckTime;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.LINK</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 200)
    @NotNull
    public String getLink() {
        return this.link;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.LINK</code>.
     */
    public void setLink(@NotNull String link) {
        this.link = link;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.QUOTA_MAX</code>.
     */
    @Nullable
    public Integer getQuotaMax() {
        return this.quotaMax;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.QUOTA_MAX</code>.
     */
    public void setQuotaMax(@Nullable Integer quotaMax) {
        this.quotaMax = quotaMax;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.QUOTA_REMAINING</code>.
     */
    @Nullable
    public Integer getQuotaRemaining() {
        return this.quotaRemaining;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.QUOTA_REMAINING</code>.
     */
    public void setQuotaRemaining(@Nullable Integer quotaRemaining) {
        this.quotaRemaining = quotaRemaining;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.LAST_ACTIVITY_TIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getLastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.LAST_ACTIVITY_TIME</code>.
     */
    public void setLastActivityTime(@NotNull LocalDateTime lastActivityTime) {
        this.lastActivityTime = lastActivityTime;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.IS_ANSWERED</code>.
     */
    @Nullable
    public Boolean getIsAnswered() {
        return this.isAnswered;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.IS_ANSWERED</code>.
     */
    public void setIsAnswered(@Nullable Boolean isAnswered) {
        this.isAnswered = isAnswered;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.ANSWER_COUNT</code>.
     */
    @Nullable
    public Integer getAnswerCount() {
        return this.answerCount;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.ANSWER_COUNT</code>.
     */
    public void setAnswerCount(@Nullable Integer answerCount) {
        this.answerCount = answerCount;
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINK.LAST_CHECK_TIME</code>.
     */
    @Nullable
    public LocalDateTime getLastCheckTime() {
        return this.lastCheckTime;
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINK.LAST_CHECK_TIME</code>.
     */
    public void setLastCheckTime(@Nullable LocalDateTime lastCheckTime) {
        this.lastCheckTime = lastCheckTime;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final StackoverflowLink other = (StackoverflowLink) obj;
        if (this.link == null) {
            if (other.link != null)
                return false;
        } else if (!this.link.equals(other.link))
            return false;
        if (this.quotaMax == null) {
            if (other.quotaMax != null)
                return false;
        } else if (!this.quotaMax.equals(other.quotaMax))
            return false;
        if (this.quotaRemaining == null) {
            if (other.quotaRemaining != null)
                return false;
        } else if (!this.quotaRemaining.equals(other.quotaRemaining))
            return false;
        if (this.lastActivityTime == null) {
            if (other.lastActivityTime != null)
                return false;
        } else if (!this.lastActivityTime.equals(other.lastActivityTime))
            return false;
        if (this.isAnswered == null) {
            if (other.isAnswered != null)
                return false;
        } else if (!this.isAnswered.equals(other.isAnswered))
            return false;
        if (this.answerCount == null) {
            if (other.answerCount != null)
                return false;
        } else if (!this.answerCount.equals(other.answerCount))
            return false;
        if (this.lastCheckTime == null) {
            if (other.lastCheckTime != null)
                return false;
        } else if (!this.lastCheckTime.equals(other.lastCheckTime))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.link == null) ? 0 : this.link.hashCode());
        result = prime * result + ((this.quotaMax == null) ? 0 : this.quotaMax.hashCode());
        result = prime * result + ((this.quotaRemaining == null) ? 0 : this.quotaRemaining.hashCode());
        result = prime * result + ((this.lastActivityTime == null) ? 0 : this.lastActivityTime.hashCode());
        result = prime * result + ((this.isAnswered == null) ? 0 : this.isAnswered.hashCode());
        result = prime * result + ((this.answerCount == null) ? 0 : this.answerCount.hashCode());
        result = prime * result + ((this.lastCheckTime == null) ? 0 : this.lastCheckTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StackoverflowLink (");

        sb.append(link);
        sb.append(", ").append(quotaMax);
        sb.append(", ").append(quotaRemaining);
        sb.append(", ").append(lastActivityTime);
        sb.append(", ").append(isAnswered);
        sb.append(", ").append(answerCount);
        sb.append(", ").append(lastCheckTime);

        sb.append(")");
        return sb.toString();
    }
}
